{"version":3,"sources":["api.ts","User.tsx","Comment.tsx","CommentList.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","preparedPosts","a","Promise","all","fetch","then","response","json","postsData","usersData","commentsData","map","post","user","find","id","userId","comments","filter","comment","postId","User","name","email","address","className","street","suite","city","zipcode","Comment","body","CommentList","key","Post","title","PostList","posts","useState","searchValue","setSearchValue","filterValue","setFilterValue","visiblePosts","useMemo","toLowerCase","includes","placeholder","type","value","onChange","e","target","App","setPosts","isDownloaded","setDownloaded","isLoading","setLoading","onClick","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edd00e25.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst posts = () => {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json());\n};\n\nconst users = () => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nconst comments = () => {\n  return fetch(`${API_URL}/comments`)\n    .then(response => response.json());\n};\n\nexport const preparedPosts = async () => {\n  const [\n    postsData,\n    usersData,\n    commentsData,\n  ] = await Promise.all([posts(), users(), comments()]);\n\n  return postsData.map((post: PreparedPost) => ({\n    ...post,\n    user: usersData.find((user: User) => user.id === post.userId),\n    comments: commentsData.filter((comment: Comment) => post.id === comment.postId),\n  }));\n};\n","import React from 'react';\n\ntype UserProps = {\n  user: User;\n};\n\nexport const User: React.FC<UserProps> = ({ user }) => {\n  const { name, email, address } = user;\n\n  return (\n    <div className=\"post__user\">\n      <p>{name}</p>\n      <p>{email}</p>\n      <p>{address.street}</p>\n      <p>{address.suite}</p>\n      <p>{address.city}</p>\n      <p>{address.zipcode}</p>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <div className=\"post__comment\">\n      <p>{name}</p>\n      <p>{body}</p>\n      <p>{email}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype PropsComment = {\n  comments: Comment[];\n};\n\nexport const CommentList: React.FC<PropsComment> = ({ comments }) => {\n  return (\n    <>\n      <h2>Comments</h2>\n      {comments.map(comment => <Comment key={comment.id} comment={comment} />)}\n    </>\n  );\n};\n","import React from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\ntype PropsPost = {\n  post: PreparedPost;\n};\n\nexport const Post: React.FC<PropsPost> = ({ post }) => {\n  return (\n    <>\n      <li className=\"post__item\">\n        <h2>{post.title}</h2>\n        <p>{post.body}</p>\n        <User user={post.user} />\n        <CommentList comments={post.comments} />\n      </li>\n    </>\n  );\n};\n","import React, { useState, useMemo } from 'react';\nimport { Post } from './Post';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n\n  const visiblePosts = useMemo(() => {\n    return posts.filter(post => (\n      (post.title+post.body).toLowerCase().includes(filterValue.toLowerCase())\n      ));\n  }, [posts, filterValue]);\n\n  const hangleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setSearchValue(value);\n    setFilterValue(value);\n  };\n\n  return (\n    <>\n      <input\n        className=\"post__input\"\n        placeholder=\"Enter words for searching\"\n        type=\"text\"\n        value={searchValue}\n        onChange={hangleChange}\n      />\n      <ul className=\"post__list\">\n        {visiblePosts.map((post) => (\n          <Post key={post.id} post={post} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { preparedPosts } from './api';\nimport { PostList } from './PostList';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<PreparedPost[]>([]);\n  const [isDownloaded, setDownloaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const handleDownloadData = () => {\n    setLoading(true);\n    preparedPosts().then((data) => {\n      setPosts(data);\n      setLoading(false);\n      setDownloaded(true);\n    });\n  };\n\n  return (\n    <div className=\"post\">\n      {!isDownloaded && (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleDownloadData}\n        >\n          {isLoading ? 'loading...' : 'Load'}\n        </button>\n      )}\n      {isDownloaded && (\n        <PostList posts={posts} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}